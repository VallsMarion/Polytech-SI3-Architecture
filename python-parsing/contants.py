# Dict that contains binary opcode for each instruction
CLASS_SHIFT_ADD_SUB_MOV = '00'
CLASS_DATA_PROCESSING = '010000'
CLASS_LOAD_STORE = '1001'
CLASS_MISCELLANEOUS = '1011'
CLASS_CONDITIONAL_BRANCH = '1101'
CLASS_NON_CONDITIONAL_BRANCH = '1110'
INSTRUCTION_OPCODE = {
    'lsls': [CLASS_SHIFT_ADD_SUB_MOV + '000', CLASS_DATA_PROCESSING + '0010'], # lsl-imm5, lsl
    'lsrs': [CLASS_SHIFT_ADD_SUB_MOV + '001', CLASS_DATA_PROCESSING + '0011'], # lsr-imm5, lsr
    'asrs': [CLASS_SHIFT_ADD_SUB_MOV + '010', CLASS_DATA_PROCESSING + '0100'], # asr-imm5, asr
    'adds': [CLASS_SHIFT_ADD_SUB_MOV + '01100', CLASS_SHIFT_ADD_SUB_MOV + '01110', CLASS_SHIFT_ADD_SUB_MOV + '110'], # add, add-imm3, add-imm8
    'subs': [CLASS_SHIFT_ADD_SUB_MOV + '01101', CLASS_SHIFT_ADD_SUB_MOV + '01111', CLASS_SHIFT_ADD_SUB_MOV + '111'],# sub, sub-imm3, sub-imms8
    'movs': CLASS_SHIFT_ADD_SUB_MOV + '100',
    'cmp': [CLASS_SHIFT_ADD_SUB_MOV + '101', CLASS_DATA_PROCESSING + '1010'], # cmp-imm8, cmp
    'ands': CLASS_DATA_PROCESSING + '0000',
    'eors': CLASS_DATA_PROCESSING + '0001',
    'adcs': CLASS_DATA_PROCESSING + '0101',
    'sbcs': CLASS_DATA_PROCESSING + '0110',
    'rors': CLASS_DATA_PROCESSING + '0111',
    'tst': CLASS_DATA_PROCESSING + '1000',
    'rsbs': CLASS_DATA_PROCESSING + '1001',
    'cmn': CLASS_DATA_PROCESSING + '1011',
    'orrs': CLASS_DATA_PROCESSING + '1100',
    'muls': CLASS_DATA_PROCESSING + '1101',
    'bics': CLASS_DATA_PROCESSING + '1110',
    'mvns': CLASS_DATA_PROCESSING + '1111',
    'str': CLASS_LOAD_STORE + '0',
    'ldr': CLASS_LOAD_STORE + '1',
    'add': CLASS_MISCELLANEOUS + '00000',
    'sub': CLASS_MISCELLANEOUS + '00001',
    'b': CLASS_NON_CONDITIONAL_BRANCH + '0',
}

CONDITION_CODE = {
    'eq': CLASS_CONDITIONAL_BRANCH + '0000',
    'ne': CLASS_CONDITIONAL_BRANCH + '0001',
    'cs': CLASS_CONDITIONAL_BRANCH + '0010',
    'hs': CLASS_CONDITIONAL_BRANCH + '0010',
    'cc': CLASS_CONDITIONAL_BRANCH + '0011',
    'lo': CLASS_CONDITIONAL_BRANCH + '0011',
    'mi': CLASS_CONDITIONAL_BRANCH + '0100',
    'pl': CLASS_CONDITIONAL_BRANCH + '0101',
    'vs': CLASS_CONDITIONAL_BRANCH + '0110',
    'vc': CLASS_CONDITIONAL_BRANCH + '0111',
    'hi': CLASS_CONDITIONAL_BRANCH + '1000',
    'ls': CLASS_CONDITIONAL_BRANCH + '1001',
    'ge': CLASS_CONDITIONAL_BRANCH + '1010',
    'lt': CLASS_CONDITIONAL_BRANCH + '1011',
    'gt': CLASS_CONDITIONAL_BRANCH + '1100',
    'le': CLASS_CONDITIONAL_BRANCH + '1101',
    'al': CLASS_CONDITIONAL_BRANCH + '1110'
}

INSTRUCTION_OPCODE_FUNCTION = {}

def name(key):
    def decorator(func):
        INSTRUCTION_OPCODE_FUNCTION[key] = func
        return func
    return decorator